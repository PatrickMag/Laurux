' Gambas class file

Private DB_Con As DB_Connection

Private Data As String[][]
Private Data_Expected As String[][]
Private Valid As Integer[][]

Private Datain As String[][]
Private Found As Boolean[]

Private Enum tabl, format, name, type, long, def, ValNul, collation, PrimK, Valide
Private EntMysql As String[] = ["Table", "Format", "Champ", "Type", "Long.", "Def.", "Null", "Collation", "Clée", "Valid."]

Public Sub _new(dbconnection As DB_Connection)
  Dim i As Integer
  
  DB_Con = dbconnection

  GridView1.Header = GridView.Both
  GridView1.ScrollBar = Scroll.Both
  GridView1.Columns.Count = EntMysql.Count
  
  For i = 0 To EntMysql.Max
    GridView1.Columns[i].Text = EntMysql[i]
    GridView1.Columns[i].Alignment = Align.Center
  Next

  GridView1.Columns[tabl].Expand = True
  GridView1.Columns[format].Width = 100
  GridView1.Columns[name].Width = 180
  GridView1.Columns[type].Width = 100
  GridView1.Columns[long].Width = 50
  GridView1.Columns[def].Width = 50
  GridView1.Columns[collation].Width = 150
  GridView1.Columns[PrimK].Width = 50
  GridView1.Columns[Valide].Width = 50
  GridView1.Columns[ValNul].Width = 80
  
End

Public Sub Refresh()
  
  Refresh_Data()
  
End

Public Sub Refresh_Data(Optional csvin As String = "", Optional csvout As String = "")

  Dim $sLine As String
  Dim $curline As String[]
  Dim $expline As String[]
  Dim $valid As Integer[]
  Dim $primary As String[]
  Dim $elem As String[]
  Dim $i As Integer = 0
  Dim $j As Integer = 0
  Dim $k As Integer = 0
  Dim $user As Variant
  Dim $table As Table
  Dim $field As Field
  Dim $hfileout As File
  Dim $hfilein As File
  Dim $found As Boolean
  Dim res As Result
  Dim obj As Object
  GridView1.Clear()
  
  Data = New String[][]
  Data_Expected = New String[][]
  Valid = New Integer[][]

  If csvout Then
    $hFileout = Open csvout For Write Create
  Endif
  If csvin Then
    Datain = New String[][]
    Found = New Boolean[]
    $hFilein = Open csvin For Input
    While Not Eof($hFilein)
      Line Input #$hFilein, $sLine
      $curline = Split($sLine, ";")
      Datain.Add($curline)
      Found.Add(False)
    Wend
  Endif
  
  For Each $table In DB_Con.Tables
    $primary = $table.PrimaryKey
    res = Utils.db.Exec("DESCRIBE " & $table.Name)
    For Each $field In $table.Fields
      $curline = New String[EntMysql.Count]
      $curline[tabl] = $table.Name '#0
      $curline[format] = $table.Type '#1
      $curline[name] = $field.Name '#2
      $curline[type] = res!Type '#3
      $curline[long] = $field.Length '#4
      $curline[def] = res!Default '#5
      $curline[ValNul] = res!Null
      $curline[collation] = $field.Collation '#7
      $curline[PrimK] = res!Key '#8

      'Valid Flag
      $curline[Valide] = "?" '#9
      $valid = New Integer[EntMysql.Count]
      $valid.Fill(-1)
      $expline = New String[]
      $expline = $curline.Copy()
      
      If Not IsNull(Datain) Then
        $j = 0
        $found = False
        For Each $elem In Datain
          'On recherche dans les données de référence
          If Trim($table.Name) = Trim($elem[tabl]) Then
            If Trim($elem[Name]) = "supprimee" Then
              Print "supprimee"
            Endif
            If Trim($field.Name) = Trim($elem[Name]) Then
              Found[$j] = True
              $found = True
              $k = 0
              'on verifie tous les champs
              While $k < EntMysql.Count
                If $curline[$k] = $elem[$k] Or $elem[$k] = "?" Then
                  $valid[$k] = 1
                Else
                  $valid[$k] = 0
                  $expline[$k] = $elem[$k]
                Endif
                $k = $k + 1
              Wend
            Endif
          Endif
          
          $j = $j + 1
        Next

        If $found = False And Controlled.Value = True Then
          Continue
        Else If $found = True And Supplem.Value = True Then
          Continue
        Endif
      Endif

      Data.Add($curline)
      Data_Expected.Add($expline)
      Valid.Add($valid)

      If csvout Then
        Print #$hfileout, $curline.Join(";")
      Endif
      $i = $i + 1
      res.MoveNext()
    Next
  Next

  If csvout Then
    Close #$hfileout
    Message.Info("Export fait au format CSV dans le fichier :\n" & csvout)
  Endif
  If csvin Then
    Close #$hfilein
  Endif
  
  If $i <> 0 Then
    GridView1.rows.count = $i
    GridView1.MoveTo(0, 0)
    GridView1.SetFocus 
    GridView1.Refresh
  Else
    GridView1.rows.count = 0
    GridView1.MoveTo(0, 0)
    GridView1.Refresh
  Endif
  
  
End

Public Sub Refresh_Data_Missing() As Boolean

  Dim elem As String[]
  Dim $i As Integer = 0
  Dim $j As Integer = 0
  Dim $valid As New Integer[]
  
  GridView1.Clear()

  Data = New String[][]
  Data_Expected = New String[][]
  Valid = New Integer[]
  If Not IsNull(Datain) Then
    For Each elem In Datain
      If Found[$j] = False Then
        Data.Add(elem)
        Data_Expected.Add(elem)
        $valid = New Integer[EntMysql.Count]
        $Valid.Fill(2)
        Valid.Add($valid)
        $i = $i + 1
      Endif
      $j = $j + 1
    Next
    If $i <> 0 Then
      GridView1.rows.count = $i
      GridView1.MoveTo(0, 0)
      GridView1.SetFocus 
      GridView1.Refresh
    Else
      GridView1.rows.count = 0
      GridView1.MoveTo(0, 0)
      GridView1.Refresh
    Endif
    Return False
  Else
  
    GridView1.rows.count = 0
    GridView1.MoveTo(0, 0)
    GridView1.Refresh
    Return True
  Endif

End



Public Sub Form_Open()

  Refresh()

End

Public Sub GridView1_Data(Row As Integer, Column As Integer)

  If Valid[Row][Column] = 1 Then
    If Not IsNull(Datain) Then
      If Column = valide Then
        Data[Row][Column] = "OK"
      Endif
      GridView1.data.Background = Color.Green
    Endif
  Else If Valid[Row][Column] = 0 Then
    If Not IsNull(Datain) Then
      If Column = valide Then
        Data[Row][Column] = "ERR"
      Endif
      GridView1.data.Background = Color.Red
    Endif
  Else If Valid[Row][Column] = 2 Then
    If Not IsNull(Datain) Then
      If Column = valide Then
        Data[Row][Column] = "ABS"
      Endif
      GridView1.data.Background = Color.Pink
    Endif
  Else
    If Not IsNull(Datain) Then
      If Column = valide Then
        Data[Row][Column] = "SUP"
      Endif
      GridView1.data.Background = Color.Orange
    Else
      If Column = valide Then
        Data[Row][Column] = "?"
      Endif
    Endif
  Endif

  If Expected.Value Then
    GridView1.data.Text = Data_Expected[Row][Column]
  Else
    GridView1.data.Text = Data[Row][Column]
  Endif

End


Public Sub Quitter_Click()

  Me.Close

End

Public Sub Export_CSV_Click()

  Me.mouse = mouse.Wait
  If Not Exist(User.home & "/tmp") Then Mkdir User.home & "/tmp"
  Refresh_Data(Null, User.Home & "/tmp/db_control.csv")
  Me.mouse = mouse.Default

End

Public Sub Control_Click()

  Me.mouse = mouse.Wait
  Refresh_Data("db_control.csv", Null)
  Me.mouse = mouse.Default

End

Public Sub AllTab_Click()

  Control_Click()

End

Public Sub Controlled_Click()

  Control_Click()

End

Public Sub Supplem_Click()

  Control_Click()

End

Public Sub Missing_Click()

  If Refresh_Data_Missing() Then
    Control_Click()
    Refresh_Data_Missing()
  Endif

End

Public Sub Expected_Click()

  GridView1.Refresh

End

Public Sub Nettoyer_Click()

  If IsNull(Datain) Then
    Message.Error("Vous devez d'abord lancer un contrôle, pour faire cette opération!")
    Return
  Endif
  If Message.Warning("Toutes les tables et champs inutilisés par Laurux vont être supprimés!\nUne sauvegarde préalable est conseillé!", "Annuler", "Nettoyer") = 1 Then Return

  Message.Info("Non implementé")

End

Public Sub Corriger_Click()

  Dim i, j As Integer
  Dim res As Result
  Dim req As String
  Dim pb As ProgBar
  Dim egn As Boolean
  
  If IsNull(Datain) Then
    Message.Error("Vous devez d'abord lancer un contrôle ou une recherche de champ absent, pour faire cette opération!")
    Return
  Endif
  If Message.Warning("Une tentative de correction de la base de donnée va être tenté!\nUne sauvegarde préalable est indispensable!", "Annuler", "Corriger") = 1 Then Return
  
  pb = New ProgBar("Correction de la base", Valid.Count, Null, True, "", True)
  pb.Show
  For i = 0 To Valid.Max
    If pb.Avancement("Table : " & Data_Expected[i][tabl] & " Champ : " & Data_Expected[i][name]) Then Break
    For j = 0 To EntMysql.Max
      If Valid[i][j] = 1 Or Valid[i][j] = -1 Then Continue
      Select Case Valid[i][j] 
        Case 0      'on modifi les champs
          Select Case j
            Case format   'On teste ENGINE
              res = Utils.db.Exec("SELECT ENGINE FROM information_schema.TABLES WHERE TABLE_SCHEMA = &1 AND TABLE_NAME= &2", "Laurux" & Start.Societe, Data_Expected[i][tabl])
              If res!ENGINE <> Data_Expected[i][J] Then
                Utils.db.Exec("ALTER TABLE Laurux" & Start.Societe & "." & Data_Expected[i][tabl] & "ENGINE=" & Data_Expected[i][J])
              Endif
            
            Case type
              Utils.db.Exec("ALTER TABLE " & Data_Expected[i][tabl] & " MODIFY " & Data_Expected[i][name] & " " & Data_Expected[i][type])
            
            Case def
              Utils.db.Exec("ALTER TABLE " & Data_Expected[i][tabl] & " MODIFY " & Data_Expected[i][name] & " " & Data_Expected[i][type] & " DEFAULT " & Data_Expected[i][def])
            
            Case ValNul 
              If Data_Expected[i][ValNul] = "YES" Then
                Utils.db.Exec("ALTER TABLE " & Data_Expected[i][tabl] & " MODIFY " & Data_Expected[i][name] & " " & Data_Expected[i][type] & " NULL")
              Else
                Utils.db.Exec("ALTER TABLE " & Data_Expected[i][tabl] & " MODIFY " & Data_Expected[i][name] & " " & Data_Expected[i][type] & " NOT NULL")
              Endif
            
            Case collation
              'on teste collation par default sur la table 
              res = Utils.db.Exec("SELECT TABLE_COLLATION FROM information_schema.TABLES WHERE TABLE_SCHEMA = &1 AND TABLE_NAME= &2", "Laurux" & Start.Societe, Data_Expected[i][tabl])
              If res!TABLE_COLLATION <> Data_Expected[i][collation] Then
                Utils.db.Exec("ALTER TABLE Laurux" & Start.Societe & "." & Data_Expected[i][tabl] & " CHARACTER SET utf8 COLLATE " & Data_Expected[i][collation])
              Endif
              'on modifie collation sur le champ
              Utils.db.Exec("ALTER TABLE Laurux" & Start.Societe & "." & Data_Expected[i][tabl] & " MODIFY " & Data_Expected[i][name] & " " & Data_Expected[i][type] & " CHARACTER SET utf8 COLLATE " & Data_Expected[i][collation])
            
            Case PrimK      'on gére les clées
              'on rajoute la clée
              If Data_Expected[i][PrimK] = "PRI" Then
                RecPri(Data_Expected[i][tabl])
              Endif
              If Data_Expected[i][PrimK] = "MUL" Then
                Utils.db.Exec("ALTER TABLE " & Data_Expected[i][tabl] & " ADD KEY (" & Data_Expected[i][name] & ");")
              Endif
              'on supprime les clées
              If Data[i][PrimK] = "MUL" And (IsNull(Data_Expected[i][PrimK]) Or Data_Expected[i][PrimK] = "PRI") Then
                Utils.db.Exec("ALTER TABLE " & Data_Expected[i][tabl] & " DROP KEY " & Data_Expected[i][name])
              Endif
              If IsNull(Data_Expected[i][PrimK]) Or Data_Expected[i][PrimK] = "MUL" Then
                If data[i][PrimK] = "PRI" Then
                  RecPri(Data_Expected[i][tabl])
                Endif
              Endif
          End Select
        
        Case 2        'on rajoute les champs
          egn = False
          res = Utils.db.Exec("SELECT ENGINE FROM information_schema.TABLES WHERE TABLE_SCHEMA = &1 AND TABLE_NAME= &2", "Laurux" & Start.Societe, Data_Expected[i][tabl])
          If Not res.Available Then 
            'on créer la table si besoin
             req = "CREATE TABLE " & Data_Expected[i][tabl] & " (" & Data_Expected[i][name] & " " & Data_Expected[i][type]
             egn = True
         Else
            'ou on rajoute un champ
            req = "ALTER TABLE " & Data_Expected[i][tabl] & " ADD " & Data_Expected[i][name] & " " & Data_Expected[i][type]
         Endif
         If Not IsNull(Data_Expected[i][collation]) Then req &= " COLLATE " & Data_Expected[i][collation]
         If Not IsNull(Data_Expected[i][def]) Then req &= " DEFAULT " & Data_Expected[i][def]
         If Data_Expected[i][ValNul] = "NO" Then req &= " NOT NULL"
         If egn Then req &= ") ENGINE = " & Data_Expected[i][format]
         Utils.db.Exec(req)
         If Data_Expected[i][PrimK] = "MUL" Then Utils.db.Exec("ALTER TABLE " & Data_Expected[i][tabl] & "ADD KEY (" & Data_Expected[i][name] & ")")
         If Data_Expected[i][PrimK] = "PRI" Then RecPri(Data_Expected[i][tabl], 2)
         j = EntMysql.Max
      End Select
    Next
  Next
  
  Finally
    pb.Close
    Refresh_Data()
    Message.Warning("Continuer à travailler sur Laurux après une réparation de la base pourrait endommager vos données \n Veuillez quitter Laurux")
  
  Catch
    Message.Error("Erreur " & Error.Text & " sur le fichier : " & Data_Expected[i][tabl] & " Champ : " & Data_Expected[i][name])
    
End

Private Sub RecPri(NomTable As String, Optional vld As Integer)      ''on redefini les clées primaires sur une table

  Dim i As Integer
  Dim cle As New String[]
  Dim ok As Boolean
  Dim res As Result
  
  If vld = 2 Then 
    'Si un champ avec une clée primaire n'existe pas on ne fait rien, uniquement en création
    For i = 0 To Valid.Max 
      If Data_Expected[i][tabl] = NomTable And Data_Expected[i][PrimK] = "PRI" Then
        res = Utils.db.Exec("SELECT * FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = &1 AND TABLE_NAME= &2 AND COLUMN_NAME = &3", "Laurux" & Start.Societe, NomTable, Data_Expected[i][name])
        If Not res.Available Then 
          ok = True 
          Break
        Endif
      Endif
    Next
  
    If ok Then Return
  Endif
  
  For i = 0 To Valid.Max
    If Data_Expected[i][tabl] = NomTable Then
      If Data_Expected[i][PrimK] = "PRI" Then
        cle.Add(Data_Expected[i][name])
        Valid[i][PrimK] = 0
      Endif
    Endif
  Next
  Try Utils.db.Exec("ALTER TABLE " & NomTable & " DROP PRIMAY KEY")  'on supprime la clée primaire si elle existe
  If cle.Count > 0 Then
    Utils.db.Exec("ALTER TABLE " & NomTable & " ADD PRIMARY KEY (" & cle.Join(",") & ")")
  Endif
  
End

